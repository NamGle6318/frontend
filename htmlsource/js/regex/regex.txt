Reg(Regular Expreesion) : 정규표현식
- 문자검색, 교체에 사용되는 패턴
- 패턴은 이미 정의가 되어 있음.

-패턴 생성
    - /정규식기호/플래그

- 플래그 
g : 전역검색
i : 대소문자 구별 없는 검색
m : 다중 행 검색(문단마다 적용하려는 패턴 사용시)

패턴
. : 문자, 공백, 기호 전부 다 탐색

예제:
- \..\. = \. + . + \. = 점과 점사이 모든 문자 
    : .A., .$. 이런식으로 된거 찾기


[] : 대괄호안에 들어있는 문자를 개별로 매칭
[abc] : a~c 까지 
[ABC] : A~C까지 
[a-z] : 소문자 알파벳 전체
[가-힣] : 한글 전체
[A-Ca-d2-6] : A~C, a~d, 2~6 을 찾음

^ : 해당문자를 제외한걸 찾음
^ : 시작하는
$ : 끝나는

^a : a가 아닌 것
[^a-z] : a~z를 제외한 것
{} : 캡처링, 그룹
ex) : (on|use|rida) : 문자안에 on or use or rida가 포함됨
(on|use|ri)day : day 앞에 포함된 것들이 on or use or ri

수량
+ : 최소 1~ 무제한
* ; 최소 0~최대 무제한
? ; 최소 0 ~ 최대 1
{숫자1} : 지정된 숫자만 허용 최소 숫자1 ~ 최대 숫자1
{숫자1,숫자2} : 최소 숫자1 ~ 최대 숫자 2
{숫자1,} : 최소 숫자1 ~ 최대 무제한

[a-z] : h, e, l, l, o
[a-z]+ : hello : a-z에 해당하는걸 이어붙힘
[a-z]* : *는 0부터 시작, a-z 없어도 됨?
[a-z]? : a-z가 아예 없거나 한개씩만 잡기
[a-z]{2} : a-z가 해당되는 게 2개 붙어 있는걸 찾기
[a-z]{2, 5} : a-z해당 최소 2개 ~ 최대 5개
[a-z]{2, *} : . . . 최소 2부터시작 

적극적(탐욕적) 일치와 소극적 일치 [grid,lazy 탐식]
<i>.+<\/i> : 
탐색 :<i>greedy</i> and <i>lazy </i> matching
결과 : <i>greedy</i> and <i>lazy </i>
원하는 결과 : <i>greedy</i> <i>lazy </i> => 적극적 일치 방식이 기본임

<i>.+?<\/i> : 소극적 일치 변경
: <i>greedy</i> <i>lazy </i>

많이 쓰는 조합을 정규식으로 하나 만들어줌
\w = [A-Zaz0-9_] : 문자(영어)이거나 숫자인것 전부를 찾음
\W = ^[A-Zaz0-9_] : 기호나 공백 한글을 찾음
\s = 공백
\S = 공백 제외한
\d = 숫자
\D = 숫자 제외한걸



자바스크립트 정규표현식
1. /패턴/플래그
2. new RegExp("패턴", "플래그")
정규식 생성방법 

정규식을 사용 가능한 메소드들
- exec() : 정규식 메소드 : 일치하는 문자열 돌려줌
- test() : 정규식 메소드 : 패턴과 일치하면 true, 일치하지 않으면 false
- match() : string 메소드 : exec()같은 개념
- search() : string 메소드 : 패턴이 시작되는 인덱스, 없으면 -1
- replace() : string 메소드 
- split() : string 메소드





.